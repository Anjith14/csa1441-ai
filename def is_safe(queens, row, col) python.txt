def is_safe(queens, row, col):
    # queens is a list where index is row, value is column of queen
    for r, c in enumerate(queens):
        if c == col or abs(r - row) == abs(c - col):
            return False
    return True

def solve_n_queens(n=8):
    solutions = []
    def backtrack(row, queens):
        if row == n:
            solutions.append(queens.copy())
            return
        for col in range(n):
            if is_safe(queens, row, col):
                queens.append(col)
                backtrack(row + 1, queens)
                queens.pop()
    backtrack(0, [])
    return solutions

def print_solution(sol):
    n = len(sol)
    for row in range(n):
        line = ""
        for col in range(n):
            if sol[row] == col:
                line += "Q "
            else:
                line += ". "
        print(line)
    print()

if __name__ == "__main__":
    sols = solve_n_queens(8)
    print(f"Number of solutions: {len(sols)}")
    # Print first solution
    print("First solution:")
    print_solution(sols[0])
